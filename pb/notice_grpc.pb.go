// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: notice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoticeRpcClient is the client API for NoticeRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeRpcClient interface {
	RetrieveNotice(ctx context.Context, in *RetrieveNoticeReq, opts ...grpc.CallOption) (*RetrieveNoticeResp, error)
	ListNotice(ctx context.Context, in *ListNoticeReq, opts ...grpc.CallOption) (*ListNoticeResp, error)
	CreateNotice(ctx context.Context, in *CreateNoticeReq, opts ...grpc.CallOption) (*CreateNoticeResp, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error)
	RetrieveNews(ctx context.Context, in *RetrieveNewsReq, opts ...grpc.CallOption) (*RetrieveNewsResp, error)
	ListNews(ctx context.Context, in *ListNewsReq, opts ...grpc.CallOption) (*ListNewsResp, error)
	CreateNews(ctx context.Context, in *CreateNewsReq, opts ...grpc.CallOption) (*CreateNewsResp, error)
	UpdateNews(ctx context.Context, in *UpdateNewsReq, opts ...grpc.CallOption) (*UpdateNewsResp, error)
	DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error)
	RetrieveAdmin(ctx context.Context, in *RetrieveAdminReq, opts ...grpc.CallOption) (*RetrieveAdminResp, error)
	ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminResp, error)
	CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error)
}

type noticeRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeRpcClient(cc grpc.ClientConnInterface) NoticeRpcClient {
	return &noticeRpcClient{cc}
}

func (c *noticeRpcClient) RetrieveNotice(ctx context.Context, in *RetrieveNoticeReq, opts ...grpc.CallOption) (*RetrieveNoticeResp, error) {
	out := new(RetrieveNoticeResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/RetrieveNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) ListNotice(ctx context.Context, in *ListNoticeReq, opts ...grpc.CallOption) (*ListNoticeResp, error) {
	out := new(ListNoticeResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/ListNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) CreateNotice(ctx context.Context, in *CreateNoticeReq, opts ...grpc.CallOption) (*CreateNoticeResp, error) {
	out := new(CreateNoticeResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/CreateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error) {
	out := new(UpdateNoticeResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/UpdateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error) {
	out := new(DeleteNoticeResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/DeleteNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) RetrieveNews(ctx context.Context, in *RetrieveNewsReq, opts ...grpc.CallOption) (*RetrieveNewsResp, error) {
	out := new(RetrieveNewsResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/RetrieveNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) ListNews(ctx context.Context, in *ListNewsReq, opts ...grpc.CallOption) (*ListNewsResp, error) {
	out := new(ListNewsResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/ListNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) CreateNews(ctx context.Context, in *CreateNewsReq, opts ...grpc.CallOption) (*CreateNewsResp, error) {
	out := new(CreateNewsResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/CreateNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) UpdateNews(ctx context.Context, in *UpdateNewsReq, opts ...grpc.CallOption) (*UpdateNewsResp, error) {
	out := new(UpdateNewsResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/UpdateNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error) {
	out := new(DeleteNewsResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/DeleteNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) RetrieveAdmin(ctx context.Context, in *RetrieveAdminReq, opts ...grpc.CallOption) (*RetrieveAdminResp, error) {
	out := new(RetrieveAdminResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/RetrieveAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) ListAdmin(ctx context.Context, in *ListAdminReq, opts ...grpc.CallOption) (*ListAdminResp, error) {
	out := new(ListAdminResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/ListAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error) {
	out := new(CreateAdminResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error) {
	out := new(UpdateAdminResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/UpdateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeRpcClient) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*DeleteAdminResp, error) {
	out := new(DeleteAdminResp)
	err := c.cc.Invoke(ctx, "/notice.notice_rpc/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeRpcServer is the server API for NoticeRpc service.
// All implementations must embed UnimplementedNoticeRpcServer
// for forward compatibility
type NoticeRpcServer interface {
	RetrieveNotice(context.Context, *RetrieveNoticeReq) (*RetrieveNoticeResp, error)
	ListNotice(context.Context, *ListNoticeReq) (*ListNoticeResp, error)
	CreateNotice(context.Context, *CreateNoticeReq) (*CreateNoticeResp, error)
	UpdateNotice(context.Context, *UpdateNoticeReq) (*UpdateNoticeResp, error)
	DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error)
	RetrieveNews(context.Context, *RetrieveNewsReq) (*RetrieveNewsResp, error)
	ListNews(context.Context, *ListNewsReq) (*ListNewsResp, error)
	CreateNews(context.Context, *CreateNewsReq) (*CreateNewsResp, error)
	UpdateNews(context.Context, *UpdateNewsReq) (*UpdateNewsResp, error)
	DeleteNews(context.Context, *DeleteNewsReq) (*DeleteNewsResp, error)
	RetrieveAdmin(context.Context, *RetrieveAdminReq) (*RetrieveAdminResp, error)
	ListAdmin(context.Context, *ListAdminReq) (*ListAdminResp, error)
	CreateAdmin(context.Context, *CreateAdminReq) (*CreateAdminResp, error)
	UpdateAdmin(context.Context, *UpdateAdminReq) (*UpdateAdminResp, error)
	DeleteAdmin(context.Context, *DeleteAdminReq) (*DeleteAdminResp, error)
	mustEmbedUnimplementedNoticeRpcServer()
}

// UnimplementedNoticeRpcServer must be embedded to have forward compatible implementations.
type UnimplementedNoticeRpcServer struct {
}

func (UnimplementedNoticeRpcServer) RetrieveNotice(context.Context, *RetrieveNoticeReq) (*RetrieveNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotice not implemented")
}
func (UnimplementedNoticeRpcServer) ListNotice(context.Context, *ListNoticeReq) (*ListNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotice not implemented")
}
func (UnimplementedNoticeRpcServer) CreateNotice(context.Context, *CreateNoticeReq) (*CreateNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotice not implemented")
}
func (UnimplementedNoticeRpcServer) UpdateNotice(context.Context, *UpdateNoticeReq) (*UpdateNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedNoticeRpcServer) DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedNoticeRpcServer) RetrieveNews(context.Context, *RetrieveNewsReq) (*RetrieveNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNews not implemented")
}
func (UnimplementedNoticeRpcServer) ListNews(context.Context, *ListNewsReq) (*ListNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNews not implemented")
}
func (UnimplementedNoticeRpcServer) CreateNews(context.Context, *CreateNewsReq) (*CreateNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNews not implemented")
}
func (UnimplementedNoticeRpcServer) UpdateNews(context.Context, *UpdateNewsReq) (*UpdateNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNews not implemented")
}
func (UnimplementedNoticeRpcServer) DeleteNews(context.Context, *DeleteNewsReq) (*DeleteNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNews not implemented")
}
func (UnimplementedNoticeRpcServer) RetrieveAdmin(context.Context, *RetrieveAdminReq) (*RetrieveAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAdmin not implemented")
}
func (UnimplementedNoticeRpcServer) ListAdmin(context.Context, *ListAdminReq) (*ListAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmin not implemented")
}
func (UnimplementedNoticeRpcServer) CreateAdmin(context.Context, *CreateAdminReq) (*CreateAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedNoticeRpcServer) UpdateAdmin(context.Context, *UpdateAdminReq) (*UpdateAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedNoticeRpcServer) DeleteAdmin(context.Context, *DeleteAdminReq) (*DeleteAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedNoticeRpcServer) mustEmbedUnimplementedNoticeRpcServer() {}

// UnsafeNoticeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeRpcServer will
// result in compilation errors.
type UnsafeNoticeRpcServer interface {
	mustEmbedUnimplementedNoticeRpcServer()
}

func RegisterNoticeRpcServer(s grpc.ServiceRegistrar, srv NoticeRpcServer) {
	s.RegisterService(&NoticeRpc_ServiceDesc, srv)
}

func _NoticeRpc_RetrieveNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).RetrieveNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/RetrieveNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).RetrieveNotice(ctx, req.(*RetrieveNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_ListNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).ListNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/ListNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).ListNotice(ctx, req.(*ListNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_CreateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).CreateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/CreateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).CreateNotice(ctx, req.(*CreateNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/UpdateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).UpdateNotice(ctx, req.(*UpdateNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/DeleteNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).DeleteNotice(ctx, req.(*DeleteNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_RetrieveNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).RetrieveNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/RetrieveNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).RetrieveNews(ctx, req.(*RetrieveNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_ListNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).ListNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/ListNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).ListNews(ctx, req.(*ListNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_CreateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).CreateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/CreateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).CreateNews(ctx, req.(*CreateNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/UpdateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).UpdateNews(ctx, req.(*UpdateNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_DeleteNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).DeleteNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/DeleteNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).DeleteNews(ctx, req.(*DeleteNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_RetrieveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).RetrieveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/RetrieveAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).RetrieveAdmin(ctx, req.(*RetrieveAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_ListAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).ListAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/ListAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).ListAdmin(ctx, req.(*ListAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).CreateAdmin(ctx, req.(*CreateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).UpdateAdmin(ctx, req.(*UpdateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeRpc_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeRpcServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.notice_rpc/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeRpcServer).DeleteAdmin(ctx, req.(*DeleteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NoticeRpc_ServiceDesc is the grpc.ServiceDesc for NoticeRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoticeRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notice.notice_rpc",
	HandlerType: (*NoticeRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveNotice",
			Handler:    _NoticeRpc_RetrieveNotice_Handler,
		},
		{
			MethodName: "ListNotice",
			Handler:    _NoticeRpc_ListNotice_Handler,
		},
		{
			MethodName: "CreateNotice",
			Handler:    _NoticeRpc_CreateNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _NoticeRpc_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _NoticeRpc_DeleteNotice_Handler,
		},
		{
			MethodName: "RetrieveNews",
			Handler:    _NoticeRpc_RetrieveNews_Handler,
		},
		{
			MethodName: "ListNews",
			Handler:    _NoticeRpc_ListNews_Handler,
		},
		{
			MethodName: "CreateNews",
			Handler:    _NoticeRpc_CreateNews_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _NoticeRpc_UpdateNews_Handler,
		},
		{
			MethodName: "DeleteNews",
			Handler:    _NoticeRpc_DeleteNews_Handler,
		},
		{
			MethodName: "RetrieveAdmin",
			Handler:    _NoticeRpc_RetrieveAdmin_Handler,
		},
		{
			MethodName: "ListAdmin",
			Handler:    _NoticeRpc_ListAdmin_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _NoticeRpc_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _NoticeRpc_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _NoticeRpc_DeleteAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice.proto",
}
